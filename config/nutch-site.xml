<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<!-- Put site-specific property overrides in this file. -->

<configuration>
    <property>
        <name>parser.character.encoding.default</name>
        <value>utf-8</value>
    </property>
    <property>
        <name>storage.data.store.class</name>
        <value>org.apache.gora.mongodb.store.MongoStore</value>
        <description>Default class for storing data</description>
    </property>

    <property>
        <name>http.agent.name</name>
        <value>Test Crawler</value>
    </property>

    <property>
        <name>http.content.limit</name>
        <value>65536000000</value>
    </property>

    <property>
        <name>plugin.includes</name>
        <value>
            protocol-http|protocol-httpclient|urlfilter-regex|index-(basic|anchor|more|metadata)|query-(basic|site|url|lang)|indexer-elastic-rest|nutch-extensionpoints|parse-(text|html|tika|metatags)|summary-basic|scoring-opic|urlnormalizer-(pass|regex|basic)
        </value>
    </property>

    <!-- Elasticsearch properties -->

    <property>
        <name>elastic.host</name>
        <value>elasticsearch</value>
        <description>Comma-separated list of hostnames to send documents to using
            TransportClient. Either host and port must be defined or cluster.
        </description>
    </property>

    <property>
        <name>elastic.port</name>
        <value>9300</value>
        <description>The port to connect to using TransportClient.</description>
    </property>

    <property>
        <name>elastic.cluster</name>
        <value>elasticsearch</value>
        <description>The cluster name to discover. Either host and port must be defined
            or cluster.
        </description>
    </property>

    <property>
        <name>elastic.index</name>
        <value>nutch_test</value>
        <description>Default index to send documents to.</description>
    </property>

    <property>
        <name>elastic.max.bulk.docs</name>
        <value>250</value>
        <description>Maximum size of the bulk in number of documents.</description>
    </property>

    <property>
        <name>elastic.max.bulk.size</name>
        <value>2500500</value>
        <description>Maximum size of the bulk in bytes.</description>
    </property>

    <property>
        <name>elastic.exponential.backoff.millis</name>
        <value>100</value>
        <description>Initial delay for the BulkProcessor's exponential backoff policy.
        </description>
    </property>

    <property>
        <name>elastic.exponential.backoff.retries</name>
        <value>10</value>
        <description>Number of times the BulkProcessor's exponential backoff policy
            should retry bulk operations.
        </description>
    </property>

    <property>
        <name>elastic.bulk.close.timeout</name>
        <value>600</value>
        <description>Number of seconds allowed for the BulkProcessor to complete its
            last operation.
        </description>
    </property>

    <!--elasticsearch rest properties-->
    <property>
        <name>elastic.rest.host</name>
        <value>elasticsearch</value>
        <description>The hostname to send documents to using Elasticsearch Jest. Both host
            and port must be defined</description>
    </property>

    <property>
        <name>elastic.rest.port</name>
        <value>9200</value>
        <description>The port to connect to using Elasticsearch Jest.</description>
    </property>

    <property>
        <name>elastic.rest.index</name>
        <value>nutch_rest</value>
        <description>Default index to send documents to.</description>
    </property>

    <property>
        <name>elastic.rest.type</name>
        <value>doc</value>
        <description>Default type to send documents to.</description>
    </property>

    <property>
        <name>elastic.rest.max.bulk.docs</name>
        <value>250</value>
        <description>Maximum size of the bulk in number of documents.</description>
    </property>

    <property>
        <name>elastic.rest.max.bulk.size</name>
        <value>2621440000</value>
        <description>Maximum size of the bulk in bytes.</description>
    </property>

    <property>
        <name>elastic.rest.https</name>
        <value>false</value>
        <description>
            "true" to enable https, "false" to disable https
            If you've disabled http access (by forcing https), be sure to
            set this to true, otherwise you might get "connection reset by peer".
        </description>
    </property>

    <property>
        <name>elastic.rest.user</name>
        <value/>
        <description>Username for auth credentials (only used when https is enabled)</description>
    </property>

    <property>
        <name>elastic.rest.password</name>
        <value/>
        <description>Password for auth credentials (only used when https is enabled)</description>
    </property>

    <property>
        <name>elastic.rest.trustallhostnames</name>
        <value>false</value>
        <description>
            "true" to trust elasticsearch server's certificate even if its listed domain name does not
            match the domain they are hosted on
            "false" to check if the elasticsearch server's certificate's listed domain is the same domain
            that it is hosted on, and if it doesn't, then fail to index
            (only used when https is enabled)
        </description>
    </property>

    <!-- Used only if plugin parse-metatags is enabled. -->
    <!-- see: https://wiki.apache.org/nutch/IndexMetatags -->
    <property>
        <name>metatags.names</name>
        <value>author,description,keywords,image,</value>
        <description>Names of the metatags to extract, separated by ','.
            Use '*' to extract all metatags. Prefixes the names with 'metatag.'
            in the parse-metadata. For instance to index description and keywords,
            you need to activate the plugin index-metadata and set the value of the
            parameter 'index.parse.md' to 'metatag.description,metatag.keywords'.
        </description>
    </property>
    <property>
        <name>index.parse.md</name>
        <value>metatag.description,metatag.keywords,metatag.author,metatag.image</value>
        <description>
            Comma-separated list of keys to be taken from the parse metadata to generate fields.
            Can be used e.g. for 'description' or 'keywords' provided that these values are generated
            by a parser (see parse-metatags plugin)
        </description>
    </property>
    <property>
        <name>index.content.md</name>
        <value/>
        <description>
            Comma-separated list of keys to be taken from the content metadata to generate fields.
        </description>
    </property>
    <property>
        <name>index.db.md</name>
        <value/>
        <description>
            Comma-separated list of keys to be taken from the crawldb metadata to generate fields.
            Can be used to index values propagated from the seeds with the plugin urlmeta
        </description>
    </property>

</configuration>
